#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// std::remove перемещает элементы но не удаляет, после перемещения необходимо
// установить новый размер для вектора, можно использовать не только для
// векторов

int main()
{
    vector<int> v{ 1, 2, 3, 2, 5, 2, 6, 2, 4, 8 };

    {
        //  сути выталкивает нужные значения из вектора и двигает указатель конца
        const auto new_end(remove(begin(v), end(v), 2));
        // вектор еще имеет прежний размер, чтобы обрезать его 
        // удаляем элементы от нового конца до старого конца
        v.erase(new_end, end(v));
    }

    for (auto i : v) {
        cout << i << ", ";
    }
    cout << '\n';

    {
        // лямбда для нечетных чисел
        const auto odd([](int i) { return i % 2 != 0; });
        // делаем remove с предикатом
        const auto new_end(remove_if(begin(v), end(v), odd));
        // вектор еще имеет прежний размер, чтобы обрезать его 
       // удаляем элементы от нового конца до старого конца
        v.erase(new_end, end(v));
    }
    // для установки текущего реального размера можно использовать shrink_to_fit
    // но ВНИМАНИЕ метод перевыделяет память
    v.shrink_to_fit();

    for (auto i : v) {
        cout << i << ", ";
    }
    cout << '\n';
}