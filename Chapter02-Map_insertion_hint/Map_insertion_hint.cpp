#include <iostream>
#include <map>
#include <string>

// Поиск и вставка в map занимает O(log(n)) и O(M*log(n)) для вставки M элементов
// Можно указать новое место вставки(дать подсказку) элемента близкое к будущему
// и тогда амортизированное время вставки будет O(1)


using namespace std;

using map_type = map<string, size_t>;

int main()
{
    map_type m{ {"b", 1}, {"c", 2}, {"d", 3} };

    auto insert_it(end(m));
    for (const auto& s : { "z", "y", "x", "w", "v" }) 
	{
        insert_it = m.insert(insert_it, { s, 1 });
    }

    // Чтобы продемонстрировать, как не нужно решать задачу, вставим строку, 
    // которая окажется с левого края ассоциативного массива, но зададим для 
    // нее неправильную подсказку, указывающую на крайнюю правую позицию
    // ассоциативного массива — end:
    m.insert(end(m), { "a", 1 });

	// При выводе можно убедиться что ошибочная подсказка ничего не испортила
	// По сути в случае неправильной подсказки вставка будет происходить 
	// за большее время чем при правильной подсказке
    for (const auto& [key, value] : m) 
	{
        std::cout << "\"" << key << "\": " << value << ", ";
    }
    std::cout << '\n';
}