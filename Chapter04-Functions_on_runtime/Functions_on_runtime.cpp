#include <iostream>
#include <string>

// Примеры использования лямбда функций
// Не изменились начиная с C++11

// Самая короткая лямбда - []{}
// Если мы напишем [=] () {...}, то захватим каждую внешнюю переменную, на которую ссылается замыкание, по значению; то есть эти значения будут скопированы.
// Запись [&] () {...} означает следующее: все внешние объекты, на которые ссылается замыкание, захватываются только по ссылке, что не приводит к копированию.

// Можно установить настройки захвата для каждой переменной отдельно. 
// Запись [a, &b] () {...} означает, что переменную a мы захватываем по значению, а переменную b — по ссылке.

// Если объект функции должен иметь возможность модифицировать получаемые им переменные путем копирования ([=]), 
// то его следует определить как mutable. Это же касается вызова неконстантных методов захваченных объектов.

// Если нужно, чтобы лямбда-выражение было constexpr, то лучше явно задавать его таковым, поскольку иначе в случае наших неверных действий компилятор начнет генерировать ошибки

// Можно использовать конструкцию [] () -> Foo {}, которая укажет компилятору, что мы всегда будем возвращать объекты типа Foo.

int main()
{
	// До C++11 создавались через структуры
	struct name_greeter {
		std::string name;
		void operator()() {
			std::cout << "Hello, " << name << '\n';
		}
	};
	name_greeter greet_john_doe{ "John Doe" };
	greet_john_doe();
	// Начиная с C++11
	auto just_one([]() { return 1; });
	// Круглые скобки необязательно указывать если нет параметров, но квадратные должны быть
	auto just_two([] { return 2; });

	std::cout << just_one() << ", " << just_two() << '\n';


	auto plus([](auto l, auto r) { return l + r; });

	std::cout << plus(1, 2) << '\n';
	std::cout << plus(std::string{ "a" }, "b") << '\n';

	std::cout << [](auto l, auto r) { return l + r; }(1, 2) << '\n';

	// Создание и инициализация переменной count
	// mutable используем чтобы была возможность менять значение count
	auto counter([count = 0]() mutable { return ++count; });

	for (size_t i{ 0 }; i < 5; ++i) {
		std::cout << counter() << ", ";
	}
	std::cout << '\n';


	int a{ 0 };
	// & - захват переменной по ссылке
	auto incrementer([&a] { ++a; });

	incrementer();
	incrementer();
	incrementer();

	std::cout << "Value of a after 3 incrementer() calls: " << a << '\n';

	// каррирование - сохранение функции имеющий параметры в объекте функции имеющем меньше параметров
	auto plus_ten([=](int x) { return plus(10, x); });

	std::cout << plus_ten(5) << '\n';
}